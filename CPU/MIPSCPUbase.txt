# MIPS CPU (Partial)
# This version of the CPU has 96 inputs:
#   * a 32-bit instruction word (op, rs, rt, rd, sh, f)
#   * two 32-bit data words that act as proxies for the
#     s and t register values (s0 ... s31), (t0 ... t31).
# There are 32 outputs, for the output word (o0 ... o31).

inputNames
{
	op[5:0], rs[4:0], rt[4:0], rd[4:0], sh[4:0], f[5:0],  # instruction word
	s[31:0], # s word
	t[31:0]  # t word
}

outputNames
{
	o[31:0] # output word
}

# immediate (renamed from inputs using a "WIRE")
circuit WIRE im15 { rd4 }
circuit WIRE im14 { rd3 }
circuit WIRE im13 { rd2 }
circuit WIRE im12 { rd1 }
circuit WIRE im11 { rd0 }
circuit WIRE im10 { sh4 }
circuit WIRE im9  { sh3 }
circuit WIRE im8  { sh2 }
circuit WIRE im7  { sh1 }
circuit WIRE im6  { sh0 }
circuit WIRE im5  { f5 }
circuit WIRE im4  { f4 }
circuit WIRE im3  { f3 }
circuit WIRE im2  { f2 }
circuit WIRE im1  { f1 }
circuit WIRE im0  { f0 }

circuit DU decoder { op[5:0], rs[4:0], rt[4:0], rd[4:0], sh[4:0], f[5:0] }
#outputs
#f1,f0,inva,invb,cin,selectImm,signExtend,selectShamt,selectALU,selectMultiply

#Working
circuit TS tSelect { t[31:0] , im[15:0] , decoder.selectImm , decoder.signExtend }
#outputs
#out[31:0]

#Working
circuit ALU32 alu { decoder.f1 , decoder.f0 , decoder.inva , decoder.invb , decoder.cin , s[31:0] , tSelect.out[31:0] }
#outputs
#out[31:0],cout

circuit S32 aluslt {alu.out[31:0],0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,alu.out31, decoder.selectSLT }

#working
circuit SCS shiftControlSelect { t[4:0] , sh[4:0] , decoder.selectSrlv } #original T
#outputs
#shmt[4:0]

#Working
circuit SR32 shiftRight32 { s[31:0] , shiftControlSelect.shmt[4:0], decoder.signExtend }
#outputs
#out[31:0]

#Working
circuit MU multiplyUnit { s[31:0], t[31:0] } #Original T
#outputs
#out[31:0]

#Working
circuit S32 outputSelect { shiftRight32.out[31:0] , aluslt.s[31:0] , decoder.selectALU }
#outputs
#s[31:0]

#Working
circuit S32 outputSelect2 { outputSelect.s[31:0] , multiplyUnit.out[31:0] , decoder.selectMultiply }

outputs { outputSelect2.s[31:0] }
#outputs { shiftRight32.out[31:0] }
#outputs {  aluslt.s[31:0] }
#outputs { multiplyUnit.out[31:0] }

#f1,f0,inva,invb,cin,selectImm,signExtend,selectShamt,selectALU,selectMultiply
#outputs { decoder.f1,decoder.f0,decoder.inva,decoder.invb,decoder.cin,decoder.selectImm,
 #decoder.signExtend,decoder.selectShamt,decoder.selectALU,decoder.selectMultiply,
 #decoder.invb,decoder.invb,decoder.invb,decoder.invb,decoder.invb,decoder.invb,
 #decoder.invb,decoder.invb,decoder.invb,decoder.invb,decoder.invb,decoder.invb,
 #decoder.invb,decoder.invb,decoder.invb,decoder.invb,decoder.invb,decoder.invb,
 #decoder.invb,decoder.invb,decoder.invb,decoder.invb,  } #outputSelect2.s[31:0]
